// Code generated by go-swagger; DO NOT EDIT.

package cats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"rest_api/swagger/models"
)

// GetOKCode is the HTTP code returned for type GetOK
const GetOKCode int = 200

/*GetOK List of cats

swagger:response getOK
*/
type GetOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Cat `json:"body,omitempty"`
}

// NewGetOK creates GetOK with default headers values
func NewGetOK() *GetOK {

	return &GetOK{}
}

// WithPayload adds the payload to the get o k response
func (o *GetOK) WithPayload(payload []*models.Cat) *GetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get o k response
func (o *GetOK) SetPayload(payload []*models.Cat) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Cat, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetInternalServerErrorCode is the HTTP code returned for type GetInternalServerError
const GetInternalServerErrorCode int = 500

/*GetInternalServerError internal error

swagger:response getInternalServerError
*/
type GetInternalServerError struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewGetInternalServerError creates GetInternalServerError with default headers values
func NewGetInternalServerError() *GetInternalServerError {

	return &GetInternalServerError{}
}

// WithPayload adds the payload to the get internal server error response
func (o *GetInternalServerError) WithPayload(payload models.Error) *GetInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get internal server error response
func (o *GetInternalServerError) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
