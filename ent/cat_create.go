// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rest_api/ent/cat"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CatCreate is the builder for creating a Cat entity.
type CatCreate struct {
	config
	mutation *CatMutation
	hooks    []Hook
}

// SetAge sets the "age" field.
func (cc *CatCreate) SetAge(i int) *CatCreate {
	cc.mutation.SetAge(i)
	return cc
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (cc *CatCreate) SetNillableAge(i *int) *CatCreate {
	if i != nil {
		cc.SetAge(*i)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CatCreate) SetName(s string) *CatCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CatCreate) SetCreatedAt(t time.Time) *CatCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CatCreate) SetNillableCreatedAt(t *time.Time) *CatCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetColor sets the "color" field.
func (cc *CatCreate) SetColor(c cat.Color) *CatCreate {
	cc.mutation.SetColor(c)
	return cc
}

// SetFeral sets the "feral" field.
func (cc *CatCreate) SetFeral(b bool) *CatCreate {
	cc.mutation.SetFeral(b)
	return cc
}

// SetNillableFeral sets the "feral" field if the given value is not nil.
func (cc *CatCreate) SetNillableFeral(b *bool) *CatCreate {
	if b != nil {
		cc.SetFeral(*b)
	}
	return cc
}

// Mutation returns the CatMutation object of the builder.
func (cc *CatCreate) Mutation() *CatMutation {
	return cc.mutation
}

// Save creates the Cat in the database.
func (cc *CatCreate) Save(ctx context.Context) (*Cat, error) {
	var (
		err  error
		node *Cat
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CatCreate) SaveX(ctx context.Context) *Cat {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CatCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CatCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CatCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := cat.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.Feral(); !ok {
		v := cat.DefaultFeral
		cc.mutation.SetFeral(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CatCreate) check() error {
	if v, ok := cc.mutation.Age(); ok {
		if err := cat.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`ent: validator failed for field "age": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := cc.mutation.Color(); !ok {
		return &ValidationError{Name: "color", err: errors.New(`ent: missing required field "color"`)}
	}
	if v, ok := cc.mutation.Color(); ok {
		if err := cat.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "color": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Feral(); !ok {
		return &ValidationError{Name: "feral", err: errors.New(`ent: missing required field "feral"`)}
	}
	return nil
}

func (cc *CatCreate) sqlSave(ctx context.Context) (*Cat, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *CatCreate) createSpec() (*Cat, *sqlgraph.CreateSpec) {
	var (
		_node = &Cat{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cat.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cat.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.Age(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cat.FieldAge,
		})
		_node.Age = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cat.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cat.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.Color(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: cat.FieldColor,
		})
		_node.Color = value
	}
	if value, ok := cc.mutation.Feral(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: cat.FieldFeral,
		})
		_node.Feral = value
	}
	return _node, _spec
}

// CatCreateBulk is the builder for creating many Cat entities in bulk.
type CatCreateBulk struct {
	config
	builders []*CatCreate
}

// Save creates the Cat entities in the database.
func (ccb *CatCreateBulk) Save(ctx context.Context) ([]*Cat, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Cat, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CatCreateBulk) SaveX(ctx context.Context) []*Cat {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CatCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CatCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
