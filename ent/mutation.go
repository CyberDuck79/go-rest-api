// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"rest_api/ent/cat"
	"rest_api/ent/predicate"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCat = "Cat"
)

// CatMutation represents an operation that mutates the Cat nodes in the graph.
type CatMutation struct {
	config
	op            Op
	typ           string
	id            *int
	age           *int
	addage        *int
	name          *string
	created_at    *time.Time
	color         *cat.Color
	feral         *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Cat, error)
	predicates    []predicate.Cat
}

var _ ent.Mutation = (*CatMutation)(nil)

// catOption allows management of the mutation configuration using functional options.
type catOption func(*CatMutation)

// newCatMutation creates new mutation for the Cat entity.
func newCatMutation(c config, op Op, opts ...catOption) *CatMutation {
	m := &CatMutation{
		config:        c,
		op:            op,
		typ:           TypeCat,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCatID sets the ID field of the mutation.
func withCatID(id int) catOption {
	return func(m *CatMutation) {
		var (
			err   error
			once  sync.Once
			value *Cat
		)
		m.oldValue = func(ctx context.Context) (*Cat, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Cat.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCat sets the old Cat of the mutation.
func withCat(node *Cat) catOption {
	return func(m *CatMutation) {
		m.oldValue = func(context.Context) (*Cat, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CatMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CatMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CatMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAge sets the "age" field.
func (m *CatMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *CatMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the Cat entity.
// If the Cat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CatMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *CatMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *CatMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ClearAge clears the value of the "age" field.
func (m *CatMutation) ClearAge() {
	m.age = nil
	m.addage = nil
	m.clearedFields[cat.FieldAge] = struct{}{}
}

// AgeCleared returns if the "age" field was cleared in this mutation.
func (m *CatMutation) AgeCleared() bool {
	_, ok := m.clearedFields[cat.FieldAge]
	return ok
}

// ResetAge resets all changes to the "age" field.
func (m *CatMutation) ResetAge() {
	m.age = nil
	m.addage = nil
	delete(m.clearedFields, cat.FieldAge)
}

// SetName sets the "name" field.
func (m *CatMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CatMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Cat entity.
// If the Cat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CatMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CatMutation) ResetName() {
	m.name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CatMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CatMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Cat entity.
// If the Cat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CatMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CatMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetColor sets the "color" field.
func (m *CatMutation) SetColor(c cat.Color) {
	m.color = &c
}

// Color returns the value of the "color" field in the mutation.
func (m *CatMutation) Color() (r cat.Color, exists bool) {
	v := m.color
	if v == nil {
		return
	}
	return *v, true
}

// OldColor returns the old "color" field's value of the Cat entity.
// If the Cat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CatMutation) OldColor(ctx context.Context) (v cat.Color, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColor: %w", err)
	}
	return oldValue.Color, nil
}

// ResetColor resets all changes to the "color" field.
func (m *CatMutation) ResetColor() {
	m.color = nil
}

// SetFeral sets the "feral" field.
func (m *CatMutation) SetFeral(b bool) {
	m.feral = &b
}

// Feral returns the value of the "feral" field in the mutation.
func (m *CatMutation) Feral() (r bool, exists bool) {
	v := m.feral
	if v == nil {
		return
	}
	return *v, true
}

// OldFeral returns the old "feral" field's value of the Cat entity.
// If the Cat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CatMutation) OldFeral(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFeral is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFeral requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeral: %w", err)
	}
	return oldValue.Feral, nil
}

// ResetFeral resets all changes to the "feral" field.
func (m *CatMutation) ResetFeral() {
	m.feral = nil
}

// Where appends a list predicates to the CatMutation builder.
func (m *CatMutation) Where(ps ...predicate.Cat) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CatMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Cat).
func (m *CatMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CatMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.age != nil {
		fields = append(fields, cat.FieldAge)
	}
	if m.name != nil {
		fields = append(fields, cat.FieldName)
	}
	if m.created_at != nil {
		fields = append(fields, cat.FieldCreatedAt)
	}
	if m.color != nil {
		fields = append(fields, cat.FieldColor)
	}
	if m.feral != nil {
		fields = append(fields, cat.FieldFeral)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CatMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cat.FieldAge:
		return m.Age()
	case cat.FieldName:
		return m.Name()
	case cat.FieldCreatedAt:
		return m.CreatedAt()
	case cat.FieldColor:
		return m.Color()
	case cat.FieldFeral:
		return m.Feral()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CatMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cat.FieldAge:
		return m.OldAge(ctx)
	case cat.FieldName:
		return m.OldName(ctx)
	case cat.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case cat.FieldColor:
		return m.OldColor(ctx)
	case cat.FieldFeral:
		return m.OldFeral(ctx)
	}
	return nil, fmt.Errorf("unknown Cat field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CatMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cat.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case cat.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case cat.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case cat.FieldColor:
		v, ok := value.(cat.Color)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColor(v)
		return nil
	case cat.FieldFeral:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeral(v)
		return nil
	}
	return fmt.Errorf("unknown Cat field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CatMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, cat.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CatMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case cat.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CatMutation) AddField(name string, value ent.Value) error {
	switch name {
	case cat.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown Cat numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CatMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(cat.FieldAge) {
		fields = append(fields, cat.FieldAge)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CatMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CatMutation) ClearField(name string) error {
	switch name {
	case cat.FieldAge:
		m.ClearAge()
		return nil
	}
	return fmt.Errorf("unknown Cat nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CatMutation) ResetField(name string) error {
	switch name {
	case cat.FieldAge:
		m.ResetAge()
		return nil
	case cat.FieldName:
		m.ResetName()
		return nil
	case cat.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case cat.FieldColor:
		m.ResetColor()
		return nil
	case cat.FieldFeral:
		m.ResetFeral()
		return nil
	}
	return fmt.Errorf("unknown Cat field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CatMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CatMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CatMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CatMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CatMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CatMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CatMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Cat unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CatMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Cat edge %s", name)
}
